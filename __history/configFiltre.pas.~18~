unit configFiltre;

interface
//uses
uses System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
FMX.Graphics, FMX.Objects, FMX.Ani, FMX.StdCtrls, FMX.Dialogs, logiqueFiltre;

//types


 // @table : array of string
 // @tableauTable : array of table
 type
    dataFiltre = class (TObject)
     procedure concevoirData ();
     function getTabEnsembleTable () : tableauTable;
     function getTabEntierValeur () : tableauTable;
     function getTabEnsembleChamp () : tableInt;

      private
       tableEmploye : table;
       tabAdr : table;
       tabCom : table;
       tabEval : table;
       tabContrat : table;
       tabTypeCont : table;

       tabEntier : table;
       tabValeur : table;

       nbChampEmploye, nbChampAdr, nbChampCom,
       nbChampEval, nbChampContrat,
       nbChampTypeCont : integer;

       tabEnsembleTable : tableauTable;
       tabEntierString : tableauTable;
       tabEnsembleChamp : tableInt;
      public

    end;

//procedure
procedure creerDataFiltre ();

//variables
var
   infoFiltre : dataFiltre;

implementation

procedure creerDataFiltre ();
begin
  infoFiltre := dataFiltre.Create;
end;

procedure dataFiltre.concevoirData();
begin
{ @4 : c'est le nombre de champs dont on a besoin pour une table.
  @(*2) : généralement les nom des champs dans la base de données ne sont pas les mêmes que
  dans le programme, ce qui fait qu'avec les noms qui sont affiché à l'ecran, on ne peut
  pas faire de requête sql, alors, on va faire une correspondance entre les noms à
  affiché et ceux à faire des requêtes. Pour savoir les nom qui doivent être affiché
  à l'ecrant, il va falloir faire la (taille du tableau -2) + @1 /2 et pour les champs avec
  lesquels on fera nos requêtes seront dans l'intervalle (taille - 2) + @1 /2 et (taille - 2)+@1.
  @2 : c'est la partie de configuration de la table. La première position sera l'id de la
  de la table et la dernière sera le nom de la table (la dernière case du tableau).
  @1 : représente d'eventuelles  clés étrangères, dans mon cas, il n'y a qu'une clé
  étrangère, elle peut être sup à @1 (si elle (fk) n'exite pasmettez '0' à la place).
  ** Pour partie la configuration (après les champs visible et invisible), la première
  position, c'est pour l'id de la table, la dernière partie c'est pour le nom de la
  table et au mileu c'est pour les clés étrangère }
  nbChampEmploye := 4;
   SetLength(infoFiltre.tableEmploye, (infoFiltre.nbChampEmploye*2)+2+1);
   infoFiltre.tableEmploye[0] := 'nom';
   infoFiltre.tableEmploye[1] := 'prenom';
   infoFiltre.tableEmploye[2] := 'Date de Naissance';
   infoFiltre.tableEmploye[3] := 'Sex';
   infoFiltre.tableEmploye[4] := 'nomEmp';
   infoFiltre.tableEmploye[5] := 'preEmp';
   infoFiltre.tableEmploye[6] := 'ddn';
   infoFiltre.tableEmploye[7] := 'sexe';
   infoFiltre.tableEmploye[8] := 'id_ce';
   infoFiltre.tableEmploye[9] := 'idAdr';
   infoFiltre.tableEmploye[10] := 'EMPLOYE';

  infoFiltre.nbChampAdr := 2;
   SetLength(infoFiltre.tabAdr, (infoFiltre.nbChampAdr*2)+2+1);
   infoFiltre.tabAdr[0] := 'Habitation';
   infoFiltre.tabAdr[1] := 'N° Habitation';
   infoFiltre.tabAdr[2] := 'habitation';
   infoFiltre.tabAdr[3] := 'numHab';
   infoFiltre.tabAdr[4] := 'idAdr';
   infoFiltre.tabAdr[5] := 'idCom';
   infoFiltre.tabAdr[6] := 'ADRESSE';

  infoFiltre.nbChampCom := 1;
   SetLength(infoFiltre.tabCom, (infoFiltre.nbChampCom*2)+2+1);
   infoFiltre.tabCom[0] := 'Commune';
   infoFiltre.tabCom[1] := 'nomCom';
   infoFiltre.tabCom[2] := 'idCom';
   infoFiltre.tabCom[3] := 'idWilaya';
   infoFiltre.tabCom[4] := 'COMMUNE';

  infoFiltre.nbChampContrat := 2;
   SetLength(infoFiltre.tabContrat, (infoFiltre.nbChampContrat*2)+2+2);
   infoFiltre.tabContrat[0] := 'Salaire';
   infoFiltre.tabContrat[1] := 'Poste';
   infoFiltre.tabContrat[2] := 'salaire';
   infoFiltre.tabContrat[3] := 'poste';
   infoFiltre.tabContrat[4] := 'idCont';
   infoFiltre.tabContrat[5] := 'idEmp';
   infoFiltre.tabContrat[6] := 'idTpCont';
   infoFiltre.tabContrat[7] := 'CONTRAT';

  infoFiltre.nbChampEval := 2;
   SetLength(infoFiltre.tabEval, (infoFiltre.nbChampEval*2)+2+1);
   infoFiltre.tabEval[0] := 'Ponctualité';
   infoFiltre.tabEval[1] := 'Compétance';
   infoFiltre.tabEval[2] := 'ponctualite';
   infoFiltre.tabEval[3] := 'competance';
   infoFiltre.tabEval[4] := 'idEval';
   infoFiltre.tabEval[5] := 'idEmp';
   infoFiltre.tabEval[6] := 'EVAL';

  infoFiltre.nbChampTypeCont := 1;
   SetLength(infoFiltre.tabTypeCont,  (infoFiltre.nbChampTypeCont*2)+2+1);
   infoFiltre.tabTypeCont[0] := 'Type de Contrat';
   infoFiltre.tabTypeCont[1] := 'typeContrat';
   infoFiltre.tabTypeCont[2] := 'idTpCont';
   infoFiltre.tabTypeCont[3] := '0';
   infoFiltre.tabTypeCont[4] := 'TYPE_CONTRAT';

   SetLength(infoFiltre.tabEnsembleTable, 6);
   infoFiltre.tabEnsembleTable[0] := infoFiltre.tableEmploye;
   infoFiltre.tabEnsembleTable[1] := infoFiltre.tabAdr;
   infoFiltre.tabEnsembleTable[2] := infoFiltre.tabCom;
   infoFiltre.tabEnsembleTable[3] := infoFiltre.tabContrat;
   infoFiltre.tabEnsembleTable[4] := infoFiltre.tabEval;
   infoFiltre.tabEnsembleTable[5] := infoFiltre.tabTypeCont;

   SetLength(infoFiltre.tabEnsembleChamp, 6);
   infoFiltre.tabEnsembleChamp[0] := infoFiltre.nbChampEmploye ;
   infoFiltre.tabEnsembleChamp[1] := infoFiltre.nbChampAdr ;
   infoFiltre.tabEnsembleChamp[2] := infoFiltre.nbChampCom ;
   infoFiltre.tabEnsembleChamp[3] := infoFiltre.nbChampContrat ;
   infoFiltre.tabEnsembleChamp[4] := infoFiltre.nbChampEval ;
   infoFiltre.tabEnsembleChamp[5] := infoFiltre.nbChampTypeCont ;

   SetLength(infoFiltre.tabEntier, 4);
   infoFiltre.tabEntier[0] := infoFiltre.tableEmploye[2];
   infoFiltre.tabEntier[1] := infoFiltre.tabContrat[0];
   infoFiltre.tabEntier[2] := infoFiltre.tabEval[0];
   infoFiltre.tabEntier[3] := infoFiltre.tabEval[1];

   SetLength(infoFiltre.tabValeur, 8);
   infoFiltre.tabValeur[0] := infoFiltre.tableEmploye[0];
   infoFiltre.tabValeur[1] := infoFiltre.tableEmploye[1];
   infoFiltre.tabValeur[2] := infoFiltre.tableEmploye[3];
   infoFiltre.tabValeur[3] := infoFiltre.tabAdr[0];
   infoFiltre.tabValeur[4] := infoFiltre.tabAdr[1];
   infoFiltre.tabValeur[5] := infoFiltre.tabCom[0];
   infoFiltre.tabValeur[6] := infoFiltre.tabContrat[1];
   infoFiltre.tabValeur[7] := infoFiltre.tabTypeCont[0];

   SetLength(infoFiltre.tabEntierString, 2);
   infoFiltre.tabEntierString[0] := infoFiltre.tabEntier;
   infoFiltre.tabEntierString[1] := infoFiltre.tabValeur;


end;

function dataFiltre.getTabEnsembleTable() : tableauTable;
begin
  Result := tabEnsembleTable;
end;

function dataFiltre.getTabEntierValeur() : tableauTable;
begin
  Result := tabEntierString;
end;

function dataFiltre.getTabEnsembleChamp () : tableInt;
begin
  Result := tabEnsembleChamp;
end;

end.
